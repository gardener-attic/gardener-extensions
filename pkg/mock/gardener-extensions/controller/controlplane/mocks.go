// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extensions/pkg/controller/controlplane (interfaces: Secrets,Chart)

// Package controlplane is a generated GoMock package.
package controlplane

import (
	context "context"
	v1beta1 "github.com/gardener/gardener/pkg/apis/garden/v1beta1"
	kubernetes "github.com/gardener/gardener/pkg/client/kubernetes"
	imagevector "github.com/gardener/gardener/pkg/utils/imagevector"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	kubernetes0 "k8s.io/client-go/kubernetes"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSecrets is a mock of Secrets interface
type MockSecrets struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsMockRecorder
}

// MockSecretsMockRecorder is the mock recorder for MockSecrets
type MockSecretsMockRecorder struct {
	mock *MockSecrets
}

// NewMockSecrets creates a new mock instance
func NewMockSecrets(ctrl *gomock.Controller) *MockSecrets {
	mock := &MockSecrets{ctrl: ctrl}
	mock.recorder = &MockSecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecrets) EXPECT() *MockSecretsMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockSecrets) Delete(arg0 kubernetes0.Interface, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSecretsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecrets)(nil).Delete), arg0, arg1)
}

// Deploy mocks base method
func (m *MockSecrets) Deploy(arg0 kubernetes0.Interface, arg1 kubernetes.Interface, arg2 string) (map[string]*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy
func (mr *MockSecretsMockRecorder) Deploy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockSecrets)(nil).Deploy), arg0, arg1, arg2)
}

// MockChart is a mock of Chart interface
type MockChart struct {
	ctrl     *gomock.Controller
	recorder *MockChartMockRecorder
}

// MockChartMockRecorder is the mock recorder for MockChart
type MockChartMockRecorder struct {
	mock *MockChart
}

// NewMockChart creates a new mock instance
func NewMockChart(ctrl *gomock.Controller) *MockChart {
	mock := &MockChart{ctrl: ctrl}
	mock.recorder = &MockChartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChart) EXPECT() *MockChartMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockChart) Apply(arg0 context.Context, arg1 kubernetes.Interface, arg2 kubernetes.ChartApplier, arg3 string, arg4 *v1beta1.Shoot, arg5 imagevector.ImageVector, arg6 map[string]string, arg7 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockChartMockRecorder) Apply(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockChart)(nil).Apply), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Delete mocks base method
func (m *MockChart) Delete(arg0 context.Context, arg1 client.Client, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChartMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChart)(nil).Delete), arg0, arg1, arg2)
}
